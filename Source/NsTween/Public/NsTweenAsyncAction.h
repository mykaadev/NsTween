// Copyright (C) 2025 nulled.softworks. All rights reserved.

#pragma once

#include "CoreMinimal.h"
#include "Kismet/BlueprintAsyncActionBase.h"
#include "NsTween.h"
#include "NsTweenAsyncAction.generated.h"

class UCurveFloat;

/** Broadcasts lifecycle events for async tween nodes. */
DECLARE_DYNAMIC_MULTICAST_DELEGATE(FTweenAsyncEvent);
/** Broadcasts float values generated by an async tween. */
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FTweenAsyncUpdateFloat, float, Value);
/** Broadcasts quaternion values generated by an async tween. */
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FTweenAsyncUpdateQuat, FQuat, Value);
/** Broadcasts rotator values generated by an async tween. */
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FTweenAsyncUpdateRotator, FRotator, Value);
/** Broadcasts vector values generated by an async tween. */
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FTweenAsyncUpdateVector, FVector, Value);
/** Broadcasts 2D vector values generated by an async tween. */
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FTweenAsyncUpdateVector2D, FVector2D, Value);
/** Broadcasts transform values generated by an async tween. */
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FTweenAsyncUpdateTransform, FTransform, Value);
/** Broadcasts linear color values generated by an async tween. */
DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FTweenAsyncUpdateLinearColor, FLinearColor, Value);

/** Base class for Blueprint async tween nodes that rely on the builder pipeline. */
UCLASS(Abstract, BlueprintType)
class NSTWEEN_API UNsTweenAsyncAction : public UBlueprintAsyncActionBase
{
    GENERATED_BODY()

public:
    /** Broadcast when the tween completes all scheduled playback. */
    UPROPERTY(BlueprintAssignable, Category = "Tween|Async")
    FTweenAsyncEvent OnComplete;

    /** Broadcast when the tween loops back to its start. */
    UPROPERTY(BlueprintAssignable, Category = "Tween|Async")
    FTweenAsyncEvent OnLoop;

    /** Broadcast when a ping-pong tween reverses direction. */
    UPROPERTY(BlueprintAssignable, Category = "Tween|Async")
    FTweenAsyncEvent OnPingPong;

    /** Pauses the active tween if one is running. */
    UFUNCTION(BlueprintCallable, Category = "Tween")
    void Pause();

    /** Resumes the active tween if it is currently paused. */
    UFUNCTION(BlueprintCallable, Category = "Tween")
    void Resume();

    /** Restarts the tween from the beginning. */
    UFUNCTION(BlueprintCallable, Category = "Tween")
    void Restart();

    /** Stops the tween and destroys the async node. */
    UFUNCTION(BlueprintCallable, Category = "Tween")
    void Stop();

    /** Updates the time multiplier that affects playback speed. */
    UFUNCTION(BlueprintCallable, Category = "Tween")
    void SetTimeMultiplier(float Multiplier);

    /** Kicks off the latent action after activation in Blueprints. */
    virtual void Activate() override;

    /** Ensures active tweens are cleaned up when the node is destroyed. */
    virtual void BeginDestroy() override;

protected:
    /** Configures shared playback state for derived async nodes. */
    void InitialiseCommon(UObject* WorldContextObject,
        float InDuration,
        ENsTweenEase InEase,
        float InDelay,
        int32 InLoops,
        float InLoopDelay,
        bool bInPingPong,
        float InPingPongDelay,
        bool bInCanTickDuringPause,
        bool bInUseGlobalTimeDilation,
        UCurveFloat* InCurve,
        bool bInUseCustomCurve);

    /** Resolves the easing preset that should be applied. */
    ENsTweenEase GetEffectiveEase() const;

    /** Applies shared builder options and lifecycle delegates. */
    void ApplyBuilderOptions(FNsTweenBuilder& Builder);

    /** Handles teardown once playback is complete. */
    void HandleCompletedTween();

    /** Implemented by derived classes to launch their specific tween. */
    virtual void LaunchTween() PURE_VIRTUAL(UNsTweenAsyncAction::LaunchTween, );

    /** Helper that wires up a typed tween using the shared builder pipeline. */
    template <typename TAction, typename TValue, typename TCallback>
    void StartTypedTween(TAction* DerivedThis, const TValue& StartValue, const TValue& EndValue, TCallback&& Callback)
    {
        TWeakObjectPtr<TAction> WeakThis(DerivedThis);
        FNsTweenBuilder Builder = FNsTween::Play(StartValue, EndValue, DurationSeconds, GetEffectiveEase(), [WeakThis, ForwardedCallback = Forward<TCallback>(Callback)](const TValue& Value) mutable
        {
            if (TAction* StrongThis = WeakThis.Get())
            {
                ForwardedCallback(*StrongThis, Value);
            }
        });

        ApplyBuilderOptions(Builder);
        ActiveTween = MoveTemp(Builder);
        ActiveTween.GetHandle();
    }

protected:
    /** Cached world context used when registering the latent action. */
    UPROPERTY()
    TObjectPtr<UObject> WorldContext = nullptr;

    /** Builder instance representing the active tween. */
    FNsTweenBuilder ActiveTween;

    /** Duration supplied by the caller. */
    float DurationSeconds = 0.f;

    /** Delay applied before playback begins. */
    float DelaySeconds = 0.f;

    /** Number of loops requested by the caller. */
    int32 LoopCount = 0;

    /** Delay between loops (currently unsupported but tracked for logging). */
    float LoopDelaySeconds = 0.f;

    /** Tracks whether the tween should ping-pong. */
    bool bPingPong = false;

    /** Delay between ping-pong direction changes (currently unsupported). */
    float PingPongDelaySeconds = 0.f;

    /** Whether ticking during pause was requested. */
    bool bCanTickDuringPause = false;

    /** Whether to respect global time dilation. */
    bool bUseGlobalTimeDilation = true;

    /** Time multiplier applied to the active tween. */
    float TimeMultiplier = 1.f;

    /** Ease preset chosen by the caller. */
    ENsTweenEase EaseType = ENsTweenEase::InOutSine;

    /** Optional curve asset used when overriding easing. */
    UPROPERTY()
    TObjectPtr<UCurveFloat> CurveOverride = nullptr;

    /** Tracks whether a custom curve override is active. */
    bool bUseCurveOverride = false;

    /** Guards against multiple activations from Blueprint graphs. */
    bool bHasActivated = false;
};

/** Async tween node that outputs float values. */
UCLASS(BlueprintType)
class NSTWEEN_API UNsTweenAsyncActionFloat : public UNsTweenAsyncAction
{
    GENERATED_BODY()

public:
    /** Broadcasts the interpolated float value each tick. */
    UPROPERTY(BlueprintAssignable, Category = "Tween|Async")
    FTweenAsyncUpdateFloat ApplyEasing;

    /** Creates an async node that tweens between two float values. */
    UFUNCTION(BlueprintCallable, meta = (BlueprintInternalUseOnly = "true", WorldContext = "WorldContextObject", DefaultToSelf = "WorldContextObject", AdvancedDisplay = "5"), Category = "Tween")
    static UNsTweenAsyncActionFloat* TweenFloat(UObject* WorldContextObject, float Start = 0.0f, float End = 1.0f, float DurationSecs = 1.0f, ENsTweenEase EaseType = ENsTweenEase::InOutQuad, float Delay = 0.f, int32 Loops = 0, float LoopDelay = 0.f, bool bPingPong = false, float PingPongDelay = 0.f, bool bCanTickDuringPause = false, bool bUseGlobalTimeDilation = true);

    /** Creates an async node that tweens between two float values using a custom curve. */
    UFUNCTION(BlueprintCallable, meta = (BlueprintInternalUseOnly = "true", WorldContext = "WorldContextObject", DefaultToSelf = "WorldContextObject", AdvancedDisplay = "5"), Category = "Tween|Custom Curve")
    static UNsTweenAsyncActionFloat* TweenFloatCustomCurve(UObject* WorldContextObject, float Start = 0.0f, float End = 1.0f, float DurationSecs = 1.0f, UCurveFloat* Curve = nullptr, float Delay = 0.f, int32 Loops = 0, float LoopDelay = 0.f, bool bPingPong = false, float PingPongDelay = 0.f, bool bCanTickDuringPause = false, bool bUseGlobalTimeDilation = true);

protected:
    /** Launches the float tween using the shared builder pipeline. */
    virtual void LaunchTween() override;

private:
    /** Starting float value for the tween. */
    float StartValue = 0.f;

    /** Ending float value for the tween. */
    float EndValue = 1.f;
};

/** Async tween node that outputs quaternion values. */
UCLASS(BlueprintType)
class NSTWEEN_API UNsTweenAsyncActionQuat : public UNsTweenAsyncAction
{
    GENERATED_BODY()

public:
    /** Broadcasts the interpolated quaternion value each tick. */
    UPROPERTY(BlueprintAssignable, Category = "Tween|Async")
    FTweenAsyncUpdateQuat ApplyEasing;

    /** Creates an async node that tweens between two quaternions. */
    UFUNCTION(BlueprintCallable, meta = (BlueprintInternalUseOnly = "true", WorldContext = "WorldContextObject", DefaultToSelf = "WorldContextObject", AdvancedDisplay = "5"), Category = "Tween")
    static UNsTweenAsyncActionQuat* TweenQuat(UObject* WorldContextObject, FQuat Start, FQuat End, float DurationSecs = 1.0f, ENsTweenEase EaseType = ENsTweenEase::InOutQuad, float Delay = 0.f, int32 Loops = 0, float LoopDelay = 0.f, bool bPingPong = false, float PingPongDelay = 0.f, bool bCanTickDuringPause = false, bool bUseGlobalTimeDilation = true);

    /** Creates an async node that tweens between two rotators via quaternion math. */
    UFUNCTION(BlueprintCallable, meta = (BlueprintInternalUseOnly = "true", WorldContext = "WorldContextObject", DefaultToSelf = "WorldContextObject", AdvancedDisplay = "5"), Category = "Tween")
    static UNsTweenAsyncActionQuat* TweenQuatFromRotator(UObject* WorldContextObject, FRotator Start = FRotator::ZeroRotator, FRotator End = FRotator::ZeroRotator, float DurationSecs = 1.0f, ENsTweenEase EaseType = ENsTweenEase::InOutQuad, float Delay = 0.f, int32 Loops = 0, float LoopDelay = 0.f, bool bPingPong = false, float PingPongDelay = 0.f, bool bCanTickDuringPause = false, bool bUseGlobalTimeDilation = true);

    /** Creates an async node that tweens between two quaternions using a custom curve. */
    UFUNCTION(BlueprintCallable, meta = (BlueprintInternalUseOnly = "true", WorldContext = "WorldContextObject", DefaultToSelf = "WorldContextObject", AdvancedDisplay = "5"), Category = "Tween|Custom Curve")
    static UNsTweenAsyncActionQuat* TweenQuatCustomCurve(UObject* WorldContextObject, FQuat Start, FQuat End, float DurationSecs = 1.0f, UCurveFloat* Curve = nullptr, float Delay = 0.f, int32 Loops = 0, float LoopDelay = 0.f, bool bPingPong = false, float PingPongDelay = 0.f, bool bCanTickDuringPause = false, bool bUseGlobalTimeDilation = true);

    /** Creates an async node that tweens between two rotators using a custom curve. */
    UFUNCTION(BlueprintCallable, meta = (BlueprintInternalUseOnly = "true", WorldContext = "WorldContextObject", DefaultToSelf = "WorldContextObject", AdvancedDisplay = "5"), Category = "Tween|Custom Curve")
    static UNsTweenAsyncActionQuat* TweenQuatFromRotatorCustomCurve(UObject* WorldContextObject, FRotator Start = FRotator::ZeroRotator, FRotator End = FRotator::ZeroRotator, float DurationSecs = 1.0f, UCurveFloat* Curve = nullptr, float Delay = 0.f, int32 Loops = 0, float LoopDelay = 0.f, bool bPingPong = false, float PingPongDelay = 0.f, bool bCanTickDuringPause = false, bool bUseGlobalTimeDilation = true);

protected:
    /** Launches the quaternion tween using the shared builder pipeline. */
    virtual void LaunchTween() override;

private:
    /** Starting quaternion for interpolation. */
    FQuat StartValue = FQuat::Identity;

    /** Ending quaternion for interpolation. */
    FQuat EndValue = FQuat::Identity;
};

/** Async tween node that outputs rotator values. */
UCLASS(BlueprintType)
class NSTWEEN_API UNsTweenAsyncActionRotator : public UNsTweenAsyncAction
{
    GENERATED_BODY()

public:
    /** Broadcasts the interpolated rotator value each tick. */
    UPROPERTY(BlueprintAssignable, Category = "Tween|Async")
    FTweenAsyncUpdateRotator ApplyEasing;

    /** Creates an async node that tweens between two rotators. */
    UFUNCTION(BlueprintCallable, meta = (BlueprintInternalUseOnly = "true", WorldContext = "WorldContextObject", DefaultToSelf = "WorldContextObject", AdvancedDisplay = "5"), Category = "Tween")
    static UNsTweenAsyncActionRotator* TweenRotator(UObject* WorldContextObject, FRotator Start = FRotator::ZeroRotator, FRotator End = FRotator::ZeroRotator, float DurationSecs = 1.0f, ENsTweenEase EaseType = ENsTweenEase::InOutQuad, float Delay = 0.f, int32 Loops = 0, float LoopDelay = 0.f, bool bPingPong = false, float PingPongDelay = 0.f, bool bCanTickDuringPause = false, bool bUseGlobalTimeDilation = true);

    /** Creates an async node that tweens between two rotators using a custom curve. */
    UFUNCTION(BlueprintCallable, meta = (BlueprintInternalUseOnly = "true", WorldContext = "WorldContextObject", DefaultToSelf = "WorldContextObject", AdvancedDisplay = "5"), Category = "Tween|Custom Curve")
    static UNsTweenAsyncActionRotator* TweenRotatorCustomCurve(UObject* WorldContextObject, FRotator Start = FRotator::ZeroRotator, FRotator End = FRotator::ZeroRotator, float DurationSecs = 1.0f, UCurveFloat* Curve = nullptr, float Delay = 0.f, int32 Loops = 0, float LoopDelay = 0.f, bool bPingPong = false, float PingPongDelay = 0.f, bool bCanTickDuringPause = false, bool bUseGlobalTimeDilation = true);

protected:
    /** Launches the rotator tween using the shared builder pipeline. */
    virtual void LaunchTween() override;

private:
    /** Starting quaternion derived from the rotator input. */
    FQuat StartQuat = FQuat::Identity;

    /** Ending quaternion derived from the rotator input. */
    FQuat EndQuat = FQuat::Identity;
};

/** Async tween node that outputs vector values. */
UCLASS(BlueprintType)
class NSTWEEN_API UNsTweenAsyncActionVector : public UNsTweenAsyncAction
{
    GENERATED_BODY()

public:
    /** Broadcasts the interpolated vector value each tick. */
    UPROPERTY(BlueprintAssignable, Category = "Tween|Async")
    FTweenAsyncUpdateVector ApplyEasing;

    /** Creates an async node that tweens between two vectors. */
    UFUNCTION(BlueprintCallable, meta = (BlueprintInternalUseOnly = "true", WorldContext = "WorldContextObject", DefaultToSelf = "WorldContextObject", AdvancedDisplay = "5"), Category = "Tween")
    static UNsTweenAsyncActionVector* TweenVector(UObject* WorldContextObject, FVector Start = FVector::ZeroVector, FVector End = FVector::ZeroVector, float DurationSecs = 1.0f, ENsTweenEase EaseType = ENsTweenEase::InOutQuad, float Delay = 0.f, int32 Loops = 0, float LoopDelay = 0.f, bool bPingPong = false, float PingPongDelay = 0.f, bool bCanTickDuringPause = false, bool bUseGlobalTimeDilation = true);

    /** Creates an async node that tweens between two vectors using a custom curve. */
    UFUNCTION(BlueprintCallable, meta = (BlueprintInternalUseOnly = "true", WorldContext = "WorldContextObject", DefaultToSelf = "WorldContextObject", AdvancedDisplay = "5"), Category = "Tween|Custom Curve")
    static UNsTweenAsyncActionVector* TweenVectorCustomCurve(UObject* WorldContextObject, FVector Start = FVector::ZeroVector, FVector End = FVector::ZeroVector, float DurationSecs = 1.0f, UCurveFloat* Curve = nullptr, float Delay = 0.f, int32 Loops = 0, float LoopDelay = 0.f, bool bPingPong = false, float PingPongDelay = 0.f, bool bCanTickDuringPause = false, bool bUseGlobalTimeDilation = true);

protected:
    /** Launches the vector tween using the shared builder pipeline. */
    virtual void LaunchTween() override;

private:
    /** Starting vector for interpolation. */
    FVector StartValue = FVector::ZeroVector;

    /** Ending vector for interpolation. */
    FVector EndValue = FVector::ZeroVector;
};

/** Async tween node that outputs 2D vector values. */
UCLASS(BlueprintType)
class NSTWEEN_API UNsTweenAsyncActionVector2D : public UNsTweenAsyncAction
{
    GENERATED_BODY()

public:
    /** Broadcasts the interpolated 2D vector value each tick. */
    UPROPERTY(BlueprintAssignable, Category = "Tween|Async")
    FTweenAsyncUpdateVector2D ApplyEasing;

    /** Creates an async node that tweens between two 2D vectors. */
    UFUNCTION(BlueprintCallable, meta = (BlueprintInternalUseOnly = "true", WorldContext = "WorldContextObject", DefaultToSelf = "WorldContextObject", AdvancedDisplay = "5"), Category = "Tween")
    static UNsTweenAsyncActionVector2D* TweenVector2D(UObject* WorldContextObject, FVector2D Start = FVector2D::ZeroVector, FVector2D End = FVector2D::ZeroVector, float DurationSecs = 1.0f, ENsTweenEase EaseType = ENsTweenEase::InOutQuad, float Delay = 0.f, int32 Loops = 0, float LoopDelay = 0.f, bool bPingPong = false, float PingPongDelay = 0.f, bool bCanTickDuringPause = false, bool bUseGlobalTimeDilation = true);

    /** Creates an async node that tweens between two 2D vectors using a custom curve. */
    UFUNCTION(BlueprintCallable, meta = (BlueprintInternalUseOnly = "true", WorldContext = "WorldContextObject", DefaultToSelf = "WorldContextObject", AdvancedDisplay = "5", DisplayName = "Tween Vector 2D Custom Curve"), Category = "Tween|Custom Curve")
    static UNsTweenAsyncActionVector2D* TweenVector2DCustomCurve(UObject* WorldContextObject, FVector2D Start = FVector2D::ZeroVector, FVector2D End = FVector2D::ZeroVector, float DurationSecs = 1.0f, UCurveFloat* Curve = nullptr, float Delay = 0.f, int32 Loops = 0, float LoopDelay = 0.f, bool bPingPong = false, float PingPongDelay = 0.f, bool bCanTickDuringPause = false, bool bUseGlobalTimeDilation = true);

protected:
    /** Launches the 2D vector tween using the shared builder pipeline. */
    virtual void LaunchTween() override;

private:
    /** Starting 2D vector for interpolation. */
    FVector2D StartValue = FVector2D::ZeroVector;

    /** Ending 2D vector for interpolation. */
    FVector2D EndValue = FVector2D::ZeroVector;
};

/** Async tween node that outputs transform values. */
UCLASS(BlueprintType)
class NSTWEEN_API UNsTweenAsyncActionTransform : public UNsTweenAsyncAction
{
    GENERATED_BODY()

public:
    /** Broadcasts the interpolated transform value each tick. */
    UPROPERTY(BlueprintAssignable, Category = "Tween|Async")
    FTweenAsyncUpdateTransform ApplyEasing;

    /** Creates an async node that tweens between two transforms. */
    UFUNCTION(BlueprintCallable, meta = (BlueprintInternalUseOnly = "true", WorldContext = "WorldContextObject", DefaultToSelf = "WorldContextObject", AdvancedDisplay = "5"), Category = "Tween")
    static UNsTweenAsyncActionTransform* TweenTransform(UObject* WorldContextObject, const FTransform& Start, const FTransform& End, float DurationSecs = 1.0f, ENsTweenEase EaseType = ENsTweenEase::InOutQuad, float Delay = 0.f, int32 Loops = 0, float LoopDelay = 0.f, bool bPingPong = false, float PingPongDelay = 0.f, bool bCanTickDuringPause = false, bool bUseGlobalTimeDilation = true);

    /** Creates an async node that tweens between two transforms using a custom curve. */
    UFUNCTION(BlueprintCallable, meta = (BlueprintInternalUseOnly = "true", WorldContext = "WorldContextObject", DefaultToSelf = "WorldContextObject", AdvancedDisplay = "5"), Category = "Tween|Custom Curve")
    static UNsTweenAsyncActionTransform* TweenTransformCustomCurve(UObject* WorldContextObject, const FTransform& Start, const FTransform& End, float DurationSecs = 1.0f, UCurveFloat* Curve = nullptr, float Delay = 0.f, int32 Loops = 0, float LoopDelay = 0.f, bool bPingPong = false, float PingPongDelay = 0.f, bool bCanTickDuringPause = false, bool bUseGlobalTimeDilation = true);

protected:
    /** Launches the transform tween using the shared builder pipeline. */
    virtual void LaunchTween() override;

private:
    /** Starting transform for interpolation. */
    FTransform StartValue = FTransform::Identity;

    /** Ending transform for interpolation. */
    FTransform EndValue = FTransform::Identity;
};

/** Async tween node that outputs linear color values. */
UCLASS(BlueprintType)
class NSTWEEN_API UNsTweenAsyncActionLinearColor : public UNsTweenAsyncAction
{
    GENERATED_BODY()

public:
    /** Broadcasts the interpolated linear color each tick. */
    UPROPERTY(BlueprintAssignable, Category = "Tween|Async")
    FTweenAsyncUpdateLinearColor ApplyEasing;

    /** Creates an async node that tweens between two linear colors. */
    UFUNCTION(BlueprintCallable, meta = (BlueprintInternalUseOnly = "true", WorldContext = "WorldContextObject", DefaultToSelf = "WorldContextObject", AdvancedDisplay = "5"), Category = "Tween")
    static UNsTweenAsyncActionLinearColor* TweenLinearColor(UObject* WorldContextObject, FLinearColor Start = FLinearColor::Black, FLinearColor End = FLinearColor::White, float DurationSecs = 1.0f, ENsTweenEase EaseType = ENsTweenEase::InOutQuad, float Delay = 0.f, int32 Loops = 0, float LoopDelay = 0.f, bool bPingPong = false, float PingPongDelay = 0.f, bool bCanTickDuringPause = false, bool bUseGlobalTimeDilation = true);

    /** Creates an async node that tweens between two linear colors using a custom curve. */
    UFUNCTION(BlueprintCallable, meta = (BlueprintInternalUseOnly = "true", WorldContext = "WorldContextObject", DefaultToSelf = "WorldContextObject", AdvancedDisplay = "5"), Category = "Tween|Custom Curve")
    static UNsTweenAsyncActionLinearColor* TweenLinearColorCustomCurve(UObject* WorldContextObject, FLinearColor Start = FLinearColor::Black, FLinearColor End = FLinearColor::White, float DurationSecs = 1.0f, UCurveFloat* Curve = nullptr, float Delay = 0.f, int32 Loops = 0, float LoopDelay = 0.f, bool bPingPong = false, float PingPongDelay = 0.f, bool bCanTickDuringPause = false, bool bUseGlobalTimeDilation = true);

protected:
    /** Launches the color tween using the shared builder pipeline. */
    virtual void LaunchTween() override;

private:
    /** Starting color for interpolation. */
    FLinearColor StartValue = FLinearColor::Black;

    /** Ending color for interpolation. */
    FLinearColor EndValue = FLinearColor::White;
};

